// Generated by CoffeeScript 1.10.0
(function () {
    var Properties, createJar, fs, generateJar, getSessionId, getUrl, login, request, utils;
    fs = require('fs');
    utils = require('utils');
    Properties = require('opsa-api-properties.coffee');
    request = require('request');
    getSessionId = function (res, cookieIndex) {
        var cookie, firstCookie, jSessionId;
        cookie = res.headers["set-cookie"];
        if (typeof cookie === 'undefined') {
            return;
        }
        firstCookie = cookie[cookieIndex];
        jSessionId = firstCookie.split("=")[1].split(";")[0];
        return jSessionId;
    };
    generateJar = function (jSessionId, url) {
        var cookie, jar;
        jar = request.jar();
        cookie = request.cookie('JSESSIONID=' + jSessionId);
        jar.setCookie(cookie, url, function (error, cookie) {
        });
        return jar;
    };
    createJar = function (res, url, cookieIndex) {
        var jSessionId, jar;
        if (!cookieIndex) {
            cookieIndex = 0;
        }
        jSessionId = getSessionId(res, cookieIndex);
        if (typeof jSessionId === 'undefined') {
            return;
        }
        jar = generateJar(jSessionId, url);
        return jar;
    };
    getUrl = function () {
        return Properties.protocol + "://" + Properties.host + ":" + Properties.port + "/" + Properties.path;
    };
    login = function () {
        var loginForm, opsaUri, seqUrl, xsrfUrl;
        opsaUri = getUrl();
        seqUrl = opsaUri + "/j_security_check";
        xsrfUrl = opsaUri + "/rest/getXSRFToken";
        loginForm = {
            j_username: Properties.user,
            j_password: Properties.password
        };
        return utils.requestp({
            url: opsaUri
        }).then((function (res) {
            var jar4SecurityRequest;
            jar4SecurityRequest = createJar(res, seqUrl, 1);
            return utils.requestp({
                url: seqUrl,
                jar: jar4SecurityRequest,
                method: 'POST',
                form: loginForm
            }).then((function (res) {
                return utils.requestp({
                    url: opsaUri,
                    jar: jar4SecurityRequest
                }).then((function (apiSessionResponse) {
                    var jSessionId, jar4XSRFRequest;
                    jSessionId = getSessionId(apiSessionResponse, 0);
                    jar4XSRFRequest = createJar(apiSessionResponse, xsrfUrl);
                    return utils.requestp({
                        url: xsrfUrl,
                        jar: jar4XSRFRequest
                    }).then(function (res) {
                        return new Promise(function (resolve, reject) {
                            return resolve({
                                xsrfToken: res.body,
                                jSessionId: jSessionId
                            });
                        });
                    });
                }));
            }));
        }), function (err) {
            console.error('%s; %s', err.message, getOpsaUri());
            console.log('%j', err.res.statusCode);
        });
    };
    module.exports = {
        login: login,
        getUrl: getUrl,
        generateJar: generateJar
    };
}).call(this);
//# sourceMappingURL=opsa.js.map
