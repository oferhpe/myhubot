// Generated by CoffeeScript 1.10.0
(function () {
  var Properties, createJar, generateJar, getOpsaUri, getRequestedHost, getSessionId, lastTime, okToContinue, ongoing, request, requestp;

  request = require('request');

  require('request-debug')(request);

  Properties = require('opsa-api-properties.coffee');

  getOpsaUri = function () {
    return Properties.protocol + "://" + Properties.host + ":" + Properties.port + "/" + Properties.path;
  };

  getSessionId = function (res, cookieIndex) {
    var cookie, firstCookie, jSessionId;
    cookie = res.headers["set-cookie"];
    if (typeof cookie === 'undefined') {
      return;
    }
    firstCookie = cookie[cookieIndex];
    return jSessionId = firstCookie.split("=")[1].split(";")[0];
  };

  generateJar = function (jSessionId, url) {
    var cookie, jar;
    jar = request.jar();
    cookie = request.cookie('JSESSIONID=' + jSessionId);
    console.log("setting cookie: " + cookie);
    jar.setCookie(cookie, url, function (error, cookie) {
    });
    return jar;
  };

  createJar = function (res, url, cookieIndex) {
    var jSessionId, jar;
    if (!cookieIndex) {
      cookieIndex = 0;
    }
    jSessionId = getSessionId(res, cookieIndex);
    if (typeof jSessionId === 'undefined') {
      return;
    }
    jar = generateJar(jSessionId, url);
    return jar;
  };

  lastTime = Date.now();

  ongoing = false;

  okToContinue = function () {
    var secondsSinceLastTime;
    secondsSinceLastTime = (Date.now() - lastTime) / 1000;
    if (secondsSinceLastTime < 10 && ongoing) {
      return false;
    } else {
      lastTime = Date.now();
      ongoing = true;
      return true;
    }
  };

  requestp = function (url, jar, method, headers, form) {
    headers = headers || {};
    method = method || 'GET';
    jar = jar || {};
    form = form || {};
    return new Promise(function (resolve, reject) {
      var reqData;
      reqData = {
        uri: url,
        headers: headers,
        method: method
      };
      if (jar) {
        reqData.jar = jar;
      }
      if (form) {
        reqData.form = form;
      }
      request(reqData, function (err, res, body) {
        if (err) {
          return reject(err);
        } else if (res.statusCode === 200 || res.statusCode === 302 || res.statusCode === 400) {
          resolve(res, body);
        } else {
          ongoing = false;
          err = new Error('Unexpected status code: ' + res.statusCode);
          err.res = res;
          return reject(err);
        }
        resolve(res, body);
      });
    });
  };

  getRequestedHost = function (res) {
    return res.match[1].replace(/^https?\:\/\//i, "");
  };

  module.exports = {
    getOpsaUri: getOpsaUri,
    getSessionId: getSessionId,
    generateJar: generateJar,
    createJar: createJar,
    okToContinue: okToContinue,
    requestp: requestp,
    getRequestedHost: getRequestedHost,
    ongoing: ongoing
  };

}).call(this);

//# sourceMappingURL=opsa-api-utils.js.map
