// Generated by CoffeeScript 1.10.0
(function () {
  var Anomalies, Opsa, Utils, parseOpsaAnomaliesData, request;
  Utils = require('opsa-api-utils.coffee');
  request = require('request');
  Anomalies = require('opsa-anomalies-api.coffee');
  Opsa = require('opsa-general-api.coffee');
  require('request-debug')(request);
  parseOpsaAnomaliesData = function (body, requestedHost) {
    var __ret, colIdx, colName, colNames, colValue, collectionId, collections, columnIdx, display, displayed, modifyOutput, obj, output, replyText, resultObjectIdx, row, rowIdx, rowStr, table, tableIdx;
    colNames = new Array();
    collections = JSON.parse(body);
    output = "";
    modifyOutput = function () {
      var colName, colValue, jsonValue, retVal, str, val;
      colName = colNames[colIdx];
      colValue = row[colIdx].displayValue;
      switch (colName) {
        case "Inactive time":
        case "First breach":
        case "Breaches timestamps":
        case "Rules":
          retVal = null;
          break;
        case "Active time":
          retVal = {
            colValue: new Date(colValue * 1000),
            colName: "Trigger Time"
          };
          break;
        case "Severity":
          str = '';
          jsonValue = JSON.parse(colValue);
          for (val in jsonValue) {
            str += ',' + jsonValue[val];
          }
          str = str.replace(',', '');
          colValue = str;
          retVal = {
            colName: colName,
            colValue: colValue
          };
          break;
        default:
          retVal = {
            colName: colName,
            colValue: colValue
          };
      }
      return retVal;
    };
    for (collectionId in collections) {
      for (resultObjectIdx in collections[collectionId]) {
        obj = collections[collectionId];
        for (tableIdx in obj[resultObjectIdx].processedResult) {
          table = obj[resultObjectIdx].processedResult[tableIdx];
          for (columnIdx in table.columnNames) {
            colNames.push(table.columnNames[columnIdx].columnTitle);
          }
          for (rowIdx in table.tableDataWithDrill) {
            row = table.tableDataWithDrill[rowIdx];
            rowStr = "";
            display = false;
            displayed = 0;
            for (colIdx in row) {
              __ret = modifyOutput();
              if (!__ret) {
                continue;
              }
              colName = __ret.colName;
              colValue = __ret.colValue;
              if (display === false && colName === "Entity" && (colValue === requestedHost || requestedHost === "*")) {
                display = true;
                displayed++;
              }
              rowStr += "*" + colName + ":* " + colValue + "\n";
            }
            if (display) {
              output += rowStr;
            }
          }
        }
      }
    }
    if (displayed === 0) {
      replyText = 'No data found for host: ' + requestedHost + "\n";
    } else {
      replyText = 'Displaying Anomalies For Host: ' + requestedHost + "\n" + output;
    }
    return replyText;
  };
  module.exports = function (robot) {
    return robot.respond(/display anomalies for host:?:\s*(.*)/i, function (res) {
      var loginCallback;
      loginCallback = function (xsrfToken, sessionId) {
        var anomaliesAPI, apiCallback;
        anomaliesAPI = new Anomalies.AnomaliesAPI(xsrfToken, sessionId);
        apiCallback = function (body) {
          var replyText, requestedHost;
          requestedHost = Utils.getRequestedHost(res);
          replyText = parseOpsaAnomaliesData(body, requestedHost);
          res.reply(replyText);
          Utils.ongoing = false;
        };
        return anomaliesAPI.invoke(apiCallback);
      };
      return Opsa.OpsaAPI.prototype.login(res, loginCallback);
    });
  };

}).call(this);

//# sourceMappingURL=opsa-hubot.js.map
